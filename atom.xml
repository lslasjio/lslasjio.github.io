<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-21T12:03:19.985Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>WILK</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring开发实例</title>
    <link href="http://yoursite.com/2019/07/21/instanceOfSpr/"/>
    <id>http://yoursite.com/2019/07/21/instanceOfSpr/</id>
    <published>2019-07-21T09:21:54.000Z</published>
    <updated>2019-07-21T12:03:19.985Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文实例来自《Java Web整合开发实战–基于Struts2+Hibernate+Spring》/贾蓓，镇明敏，杜磊等编著.—北京 清华大学出版社，2013.7（2017.2重印）第4篇 第15章 15.3 Spring开发实例（p464-468）</em></p><p>开发工具：Eclipse IDE 4.12.0</p><p>用到的jar包：commons-logging-1.2</p><p>​                        spring-framework-5.1.8</p><p>开发工具下载：(解压密码：wilk)</p><ul><li><u><a href="https://pan.baidu.com/s/11s63zsCEV5GJH6jsFX3xjg" target="_blank" rel="noopener">Eclipse 4.12.0 64位+springsource-tool-suite </a></u>提取码: wzgj</li><li><u><a href="https://pan.baidu.com/s/1wm2jjBPKP996t5_jxfS1NA" target="_blank" rel="noopener">commons-logging-1.2+spring-framework-5.1.8</a></u>提取码: tacx</li></ul><h2 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h2><h3 id="一、创建SpringDemo工程"><a href="#一、创建SpringDemo工程" class="headerlink" title="一、创建SpringDemo工程"></a>一、创建SpringDemo工程</h3><p>​        配置spring，引入jar包，构件路径，此处具体过程请参考：</p><p><u><a href="https://blog.csdn.net/csdnsjg/article/details/80152815" target="_blank" rel="noopener">CSDN|《手把手教你安装Spring+搭建Spring开发环境》|作者：csdnsjg</a></u></p><h3 id="二、搭建包和文件"><a href="#二、搭建包和文件" class="headerlink" title="二、搭建包和文件"></a>二、搭建包和文件</h3><p>​        在src目录下创建com.bean包，此包下面分别创建Person.java，ChineseImpl.java，AmercianImpl.java三个文件，再在src目录下创建com.spring包，在此包下面创建Test.java。最后在src目录下创建applicationContext.xml。目录结构如下：</p><p><img src="/2019/07/21/instanceOfSpr/AA.png" alt="p1"></p><h3 id="三、各个文件代码"><a href="#三、各个文件代码" class="headerlink" title="三、各个文件代码"></a>三、各个文件代码</h3><h4 id="1-Person-java"><a href="#1-Person-java" class="headerlink" title="1.Person.java"></a>1.Person.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="comment">//接口中包含了一个Speak（）方法，表示人都可以说话</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Speak</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-ChineseImpl-java"><a href="#2-ChineseImpl-java" class="headerlink" title="2.ChineseImpl.java"></a>2.ChineseImpl.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChineseImpl</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"我是中国人，我的名字是"</span>+<span class="keyword">this</span>.name+<span class="string">"我今年"</span>+<span class="keyword">this</span>.age+<span class="string">"岁。"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-AmercianImpl-java"><a href="#3-AmercianImpl-java" class="headerlink" title="3.AmercianImpl.java"></a>3.AmercianImpl.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmercianImpl</span> <span class="keyword">implements</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"I'm Amrecian.My name is"</span>+<span class="keyword">this</span>.name+<span class="string">",I'm"</span>+<span class="keyword">this</span>.age+<span class="string">"years old"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-applicationContext-xml"><a href="#4-applicationContext-xml" class="headerlink" title="4.applicationContext.xml"></a>4.applicationContext.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring 配置文件根元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop-4.3.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置Chinese实例，实现类为com.bean，ChineseImpl.java --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"chinese"</span> <span class="attr">class</span>=<span class="string">"com.bean.ChineseImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>10<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"amercian"</span> <span class="attr">class</span>=<span class="string">"com.bean.AmercianImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Tom"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"15"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-Test-java"><a href="#5-Test-java" class="headerlink" title="5.Test.java"></a>5.Test.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bean.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">Person person=(Person)context.getBean(<span class="string">"chinese"</span>);</span><br><span class="line">person.Speak();</span><br><span class="line">person=(Person)context.getBean(<span class="string">"amercian"</span>);</span><br><span class="line">person.Speak();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、实例分析"><a href="#四、实例分析" class="headerlink" title="四、实例分析"></a>四、实例分析</h3><h4 id="1-关于ChineseImpl类和AmercianImp类"><a href="#1-关于ChineseImpl类和AmercianImp类" class="headerlink" title="1.关于ChineseImpl类和AmercianImp类"></a>1.关于ChineseImpl类和AmercianImp类</h4><p>​        ChineseImpl类和AmercianImpl类实现了Person接口，均拥有name和age两个属性，当Speak()方法被调用时，会将两个属性的值打印出来，但打印之前需要调用setName()和setAge()方法，来分别给两个类赋值。</p><p>在通常情况下，对于ChineseImpl类和AmercianImpl类会采用以下方式来调用setName()和setAge()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bean.AmercianImpl;</span><br><span class="line"><span class="keyword">import</span> com.bean.ChineseImpl;</span><br><span class="line"><span class="keyword">import</span> com.bean.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ins();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ins</span><span class="params">()</span></span>&#123;</span><br><span class="line">ChineseImpl c1=<span class="keyword">new</span> ChineseImpl();</span><br><span class="line">AmercianImpl a1=<span class="keyword">new</span> AmercianImpl();</span><br><span class="line">c1.setName(<span class="string">"小慧"</span>);</span><br><span class="line">c1.setAge(<span class="number">11</span>);</span><br><span class="line">a1.setName(<span class="string">"Jim"</span>);</span><br><span class="line">a1.setAge(<span class="number">16</span>);</span><br><span class="line">a1.Speak();</span><br><span class="line">c1.Speak();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        使用此种方法虽然也可以输出实例中要求的结果，但是ChineseImpl类和AmercianImpl类都分别在Test2类中进行了实例化，相较于文中实例，这种方法使类之间的联系变得更加紧密，耦合度变高。因此需要使用Spring容器来对两个类的方法进行调用，再在Test类中获得两个实例的引用。</p><h4 id="2-关于applicationContext-xml"><a href="#2-关于applicationContext-xml" class="headerlink" title="2.关于applicationContext.xml"></a>2.关于applicationContext.xml</h4><p>​        在Spring中，需要使用配置文件applicationContext.xml来告知容器如何对ChineseImpl类和AmercianImpl类进行配置。在XML文件中，<beans>是根元素（关于<beans>元素内的xmlns,xsi:schemaLocation可参考以下两篇文章：1.<a href="https://www.cnblogs.com/shamo89/p/9925538.html" target="_blank" rel="noopener">关于spring xml文件中的xmlns,xsi:schemaLocation</a>2.<a href="https://blog.csdn.net/zzjjiandan/article/details/22922847?tdsourcetag=s_pcqq_aiomsg" target="_blank" rel="noopener">spring配置文件详解</a>），用来存放各个<bean>元素，<bean>元素用来对类进行声明，id属性写类的实例名称，name中写类的全名称。在<bean>元素的子元素<property>中对该类中的属性进行说明，name属性表示Bean类中的属性名称，value属性表示该属性的值，ref属性表示要引用的Bean名称。对于基本数据类型的值可以由value进行指定，当对其他Bean类进行引用时，就用ref来进行指定。</property></bean></bean></bean></beans></beans></p><p>​        在XML文件中对ChineseImpl进行实例化时，Spring容器做了相当于以下代码的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ChineseImpl chinese=<span class="keyword">new</span> ChineseImpl();</span><br><span class="line">chinese.setName(<span class="string">"小明"</span>);</span><br><span class="line">chinese.setAge(<span class="string">"10"</span>);</span><br></pre></td></tr></table></figure><h4 id="3-关于Test-java"><a href="#3-关于Test-java" class="headerlink" title="3.关于Test.java"></a>3.关于Test.java</h4><p>​    在Test.java中，使用了ApplicationContext来创建了Spring容器，将applicationContext.xml文件装载进容器后，使用getBean()来获得对ChineseImpl类和AmercianImp类的引用，容器使用这两个引用调用了各自的setter方法，对两个类的实例进行复制，再调用两个类的Speak()方法来打印出各自的值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;本文实例来自《Java Web整合开发实战–基于Struts2+Hibernate+Spring》/贾蓓，镇明敏，杜磊等编著.—北京 清华大学出版社，2013.7（2017.2重印）第4篇 第15章 15.3 Spring开发实例（p464-468）&lt;/em&gt;&lt;/p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>作品展示-毕业设计</title>
    <link href="http://yoursite.com/2019/07/16/worksShow-1/"/>
    <id>http://yoursite.com/2019/07/16/worksShow-1/</id>
    <published>2019-07-16T09:34:30.000Z</published>
    <updated>2019-07-20T19:50:16.543Z</updated>
    
    <content type="html"><![CDATA[<h3 id="信息概要："><a href="#信息概要：" class="headerlink" title="信息概要："></a>信息概要：</h3><ul><li><p>设计名称：校园餐厅菜谱评价交流订餐平台</p></li><li><p>参与人数：2人</p></li><li><p>参与模块名称：微信小程序模块</p></li><li><p>是否通过毕业答辩：是</p></li><li><p>论文查重率（维普）：3.37%</p></li><li><p>使用工具：微信开发者工具</p></li><li><p>使用框架： iView Weapp <a href="https://weapp.iviewui.com/docs/guide/start" target="_blank" rel="noopener">官网</a></p><p>​                    Vant Weapp<a href="https://youzan.github.io/vant-weapp/#/intro" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="作品展示（GIF）："><a href="#作品展示（GIF）：" class="headerlink" title="作品展示（GIF）："></a>作品展示（GIF）：</h3><p><img src="/2019/07/16/worksShow-1/GA.gif" alt="GA"></p><p><img src="/2019/07/16/worksShow-1/GB.gif" alt="GB"></p><h3 id="其他信息："><a href="#其他信息：" class="headerlink" title="其他信息："></a>其他信息：</h3><h4 id="论文封面摘要："><a href="#论文封面摘要：" class="headerlink" title="论文封面摘要："></a>论文封面摘要：</h4><p><img src="/2019/07/16/worksShow-1/AA.png" alt="AA"></p><p><img src="/2019/07/16/worksShow-1/AB.png" alt="AB"></p><h4 id="查重报告摘要："><a href="#查重报告摘要：" class="headerlink" title="查重报告摘要："></a>查重报告摘要：</h4><p><img src="/2019/07/16/worksShow-1/AC.png" alt="AC"></p><h3 id="毕业设计内容概要："><a href="#毕业设计内容概要：" class="headerlink" title="毕业设计内容概要："></a>毕业设计内容概要：</h3><p><em>下文取自论文中“1.4研究内容”部分：</em></p><hr><p>本文的研究对象是基于微信小程序框架所开发的校园菜谱交流及套餐预订小程序移动应用，主要研究内容有以下几个方面：</p><p>1)  微信小程序用户验证功能，当用户登录账号时，微信小程序中将自动获取用户微信号，并将用户信息发送到后台服务器完成自动登录，从而无需用户手动输入账号进行登录。</p><p>2)  餐厅菜谱查看功能，用户可以查看某一食堂发布的本星期菜谱，方便用户安排自己就餐计划。</p><p>3)  餐厅套餐预订功能，用户在查看餐厅菜谱的同时，还可以进行订餐操作。</p><p>4)  用户个人订单查看功能，当用户购买套餐后，可以查看自己已购买套餐列表信息，并进行退单，评价等操作。</p><p>5)  餐厅公告发布查看功能，当餐厅有新菜发布，或是有失物招领类似的事情时，餐厅可以通过后台管理来发布公告信息，用户则可以在微信小程序端中查看了解。</p><p>该系统原型将采用微信小程序为开发框架，以CSS样式结合IviewUI，VantUI框架显示，接口方式与后台数据交互，开发工具为微信开发者工具。 </p><hr><h3 id="系统实现："><a href="#系统实现：" class="headerlink" title="系统实现："></a>系统实现：</h3><p><em>以下内容取自论文</em>“第5章 系统实现”部分：</p><hr><h4 id="5-1-用户验证功能实现"><a href="#5-1-用户验证功能实现" class="headerlink" title="5.1 用户验证功能实现"></a>5.1 用户验证功能实现</h4><p>用户功能实现将包括两个部分，一是用户登录，而是用户注册。</p><h5 id="5-1-1用户注册"><a href="#5-1-1用户注册" class="headerlink" title="5.1.1用户注册"></a>5.1.1用户注册</h5><p>1、实现目标</p><p>当后台服务器数据库中无该微信用户对应账号时，跳转到注册确认页面，用户点击“授权登录”按钮后，跳转到登录信息填写页面</p><p>2、实现方法</p><p>(1)     首先上面应当展示获取到的微信用户头像以及微信昵称，获取方法如下：</p><p>a)        获取用户头像信息：</p><p>​       在onLoad方法中，获取全局变量中的userIofo对象，并存入本页对象中。</p><p>b)        获取用户昵称信息：</p><p>​       获取缓存的accountInfo对象，一一验证其中信息是否为空，再分别将获取的对象存入本页对象中。</p><p>(2)     然后关于手机号验证，用正则表达式在小程序逻辑层进行验证，如图5.4所示：</p><p>a)        手机号验证：</p><p>获取输入框中手机号信息，先进行是否为空和长度验证，在用正则表达式进行格式验证，符合要求则通过，不符合则提示“手机号有误”。</p><p>(3)     提交结果，发送相关参数到后台服务器，注册成功返回到个人页面，方法如下：</p><p>a)        注册请求提交：</p><p>将获取到的注册信息存入data参数后，用wx.request接口发送POST请求，提交注册信息到后台服务器。</p><p>3、结果展示：</p><p><img src="/2019/07/16/worksShow-1/clip_image002.jpg" alt="img"></p><p>​                                                                                图5.7 用户注册</p><p>​                                                                        Figure 5.7 User registration</p><h5 id="5-1-2用户登录"><a href="#5-1-2用户登录" class="headerlink" title="5.1.2用户登录"></a>5.1.2用户登录</h5><p>1、实现目标</p><p>用户打开小程序时，主页中onload方法调用wx.login方法，获取用户code对象，然后连同其他参数发送到后台服务器上，请求登录。服务器获取code对象后和小程序参数发送到微信端口服务，请求密匙，成功后服务器返回登录结果到小程序，小程序保存获取到的用户信息。</p><p>2、实现方法</p><p>(1)     小程序调用wx.login方法，获取code对象，并将请求发送到后台服务器，获取如下：</p><p>a)        获取code对象，发送登录请求：</p><p>​      先调用wx.login接口，调用成功后获取到code对象，存在于success方法的res参数中，在success方法之中调用wx.request接口发送GET请求，携带所需对象与data参数中，发送到指定服务器接口地址，在回调成功的success方法中获取到res1参数，该参数包含用户登录信息，获取完成后提示登录成功。</p><p>(2)     获取返回结果，缓存用户信息：</p><p>a)         缓存用户信息：</p><p>​                  在登录请求完成后，将获取到的用户信息一一存入小程序缓存中。</p><h4 id="5-2餐厅列表查询实现"><a href="#5-2餐厅列表查询实现" class="headerlink" title="5.2餐厅列表查询实现"></a>5.2餐厅列表查询实现</h4><h5 id="5-2-1实现目标"><a href="#5-2-1实现目标" class="headerlink" title="5.2.1实现目标"></a>5.2.1实现目标</h5><p>打开小程序进入主页，登录账号后，跳转到主页，主页的功能就是显示餐厅列表，方便用户查看。</p><h5 id="5-2-2实现方法"><a href="#5-2-2实现方法" class="headerlink" title="5.2.2实现方法"></a>5.2.2实现方法</h5><p>(1)     发送请求获取食堂列表，并保存列表信息，实现方法如下：</p><p>a)        请求食堂信息：</p><p>​      调用wx.request接口发送POST请求，获取食堂列表。</p><p>b)        缓存食堂列表：</p><p>​      在调用wx.request接口的success回调方法中，获取res参数，并将其中的餐厅列表信息存入本页变量中。</p><p>(2)     读取保存的列表信息，用列表渲染的方式，结合UI框架显示食堂列表信息，实现方法如下：</p><p>a)        显示食堂列表：</p><p>​      先用wx：if进行条件渲染，判断该食堂是否有食堂图片，有则显示该食堂图片与列表中，没有则使用本地图片。用vantUI框架中的card模块显示餐厅卡片，其中信息则使用IviewUI框架的单元格输出显示信息，再在食堂地址部分进行条件渲染，如果地址为空则显示“未知地址”，否则显示食堂地址。最后再在外层view绑定toCanteen点击事件。</p><h5 id="5-2-3结果展示"><a href="#5-2-3结果展示" class="headerlink" title="5.2.3结果展示"></a>5.2.3结果展示</h5><p>获取餐厅列表后，渲染显示如图5.13所示。</p><p><img src="/2019/07/16/worksShow-1/clip_image004.jpg" alt="img"></p><p>​                                                                                    图5.13 食堂列表</p><p>​                                                                            Figure 5.13 canteen list </p><h4 id="5-3菜谱查看及套餐查看功能实现"><a href="#5-3菜谱查看及套餐查看功能实现" class="headerlink" title="5.3菜谱查看及套餐查看功能实现"></a>5.3菜谱查看及套餐查看功能实现</h4><h5 id="5-3-1实现目标"><a href="#5-3-1实现目标" class="headerlink" title="5.3.1实现目标"></a>5.3.1实现目标</h5><p>当用户点击食堂卡片时，进入餐厅详情页面，获取日期后逻辑层发送请求进行查询，并将套餐列表和菜谱列表缓存，在视图层将该数据进行列表渲染显示。</p><h5 id="5-3-2实现方法"><a href="#5-3-2实现方法" class="headerlink" title="5.3.2实现方法"></a>5.3.2实现方法</h5><p>(1)     实现卡片点击事件，点击时接收餐厅信息参数并跳转到餐厅详情页面，方法如下：</p><p>a)        绑定点击事件与参数：</p><p>​       在食堂卡片的外层绑定toCanteen点击事件和data-canteenMsg参数。</p><p>b)        获取参数并跳转到餐厅详情页面：</p><p>​       点击食堂列表的食堂卡片后，调用外层view绑定的toCanteen点击事件，获取data-canteenMsg参数，并将该参数存入小程序缓存中，跳转入餐厅详情页面。</p><p>(2)     获取日期参数，当第一次进入时获取明天日期，点击日期时获取当天日期参数：</p><p>a)        初始化获取明天日期：</p><p>​      调用工具类中的getDateStr3方法，获取明天的日期信息。</p><p>b)        获取指定日期参数：</p><p>​      先获取今天日期信息，再判断选定日期是否是今天之后，是则显示套餐预订部分，否则隐藏餐厅预订部分，只显示菜谱发布部分。再将选择日期信息存入本页data对象中。</p><p>(3)     获取指定日期下该餐厅的菜谱列表和套餐列表，缓存信息并渲染显示，代码如图</p><p>a)        获取菜谱列表：</p><p>​       调用wx.request接口发送POST请求，携带餐厅ID，日期等相应参数，请求菜谱列表，再在success回调中获取返回菜谱列表。</p><p>b)        获取套餐列表：</p><p>​       调用wx.request接口发送POST请求，携带餐厅ID，日期等相应参数，请求菜谱列表，再在success回调中获取返回套餐列表。</p><h5 id="5-3-3结果展示"><a href="#5-3-3结果展示" class="headerlink" title="5.3.3结果展示"></a>5.3.3结果展示</h5><p>进入餐厅详情后，获取指定日期的菜谱列表情况如下：</p><p><img src="/2019/07/16/worksShow-1/clip_image006.png" alt="img"></p><p>​                                                                                    图5.20 菜谱列表</p><p>​                                                                            Figure 5.20 The menu list</p><p>获取的套餐列表信息如下：</p><p><img src="/2019/07/16/worksShow-1/clip_image008.png" alt="img"></p><p>​                                                                                图5.21 套餐列表</p><p>​                                                                        Figure 5.21 The menu list</p><h4 id="5-4预订套餐功能实现"><a href="#5-4预订套餐功能实现" class="headerlink" title="5.4预订套餐功能实现"></a>5.4预订套餐功能实现</h4><h5 id="5-4-1实现目标"><a href="#5-4-1实现目标" class="headerlink" title="5.4.1实现目标"></a>5.4.1实现目标</h5><p>当用户选择一道套餐时，点击右箭头可以增加选中数量，并进行计费，点击左箭头则减少选中数量，并进行计费，点击购买按钮进入订单确认页面，方便用户查看该订单信息，用户点击确认按钮时，提交该订单，扣取用户费用并产生一条新的订单。</p><h5 id="5-4-2实现方法"><a href="#5-4-2实现方法" class="headerlink" title="5.4.2实现方法"></a>5.4.2实现方法</h5><p>(1)     在套餐卡片中的左右箭头分别绑定点击事件，当箭头被点击时获取该卡片套餐信息，改变该套餐的选择数量，获取该套餐的费用并结合数量计算价格，进行显示：</p><p>a)        增加按钮事件：</p><p>​      先判断该卡片所绑定的选择数量是否为0，是则进行置0操作，将其他已选择套餐卡片置0，然后增加选定卡片绑定所选数量，调用updateMealNum方法更新显示，再调用choosePrice方法计算总价。</p><p>b)        减少按钮事件：</p><p>​      先判断该卡片所绑定的选择数量是否大于0，是则进行减少操作，减少选定卡片绑定所选数量，调用updateMealNum方法更新显示，再调用choosePrice方法计算总价。</p><p>(2)     在点击“提交订单”后，跳转到订单详情页面，并携带该套餐信息参数，方法如下：</p><p>a)        提交订单按钮事件：</p><p>​      将该订单获取的总价，商品信息，日期等信息分别缓存如微信小程序中，跳转到订单确认页面中。</p><p>(3)     在订单详情页面的确认购买按钮绑定点击事件，当用户点击时发送POST请求，携带该订单参数以及用户参数，请求产生新订单并扣取用户费用，方法如下：</p><p>a)        提交订单事件：</p><p>​      该方法中调用wx.request接口发送POST请求，携带相应参数与data参数中，向后台服务器请求生成订单，调用成功后，在success回调中提示“订餐成功”，并跳转到订餐成功页面。</p><h5 id="5-4-3结果展示"><a href="#5-4-3结果展示" class="headerlink" title="5.4.3结果展示"></a>5.4.3结果展示</h5><p>当点击套餐右箭头时，效果如图5.26，图5.27所示：</p><p><img src="/2019/07/16/worksShow-1/clip_image010.png" alt="img"></p><p>​                                                                            图5.26 价格计算（1）</p><p>​                                                                    Figure 5.26 Price calculation (1)</p><p><img src="/2019/07/16/worksShow-1/clip_image012.png" alt="img"></p><p>​                                                                                图5.27 价格计算（2）</p><p>​                                                                        Figure 5.27 Price calculation (2)</p><p>订单确认页面如图5.28所示：</p><p><img src="/2019/07/16/worksShow-1/clip_image014.png" alt="img"></p><p>​                                                                                图5.28 订单确认页面</p><p>​                                                                Figure 5.28 Order confirmation page</p><p>提交成功页面如图5.29所示：</p><p><img src="/2019/07/16/worksShow-1/clip_image016.png" alt="img"></p><p>​                                                                                图5.29 提交成功页面</p><p>​                                                            Figure 5.29 Successful submission page</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;信息概要：&quot;&gt;&lt;a href=&quot;#信息概要：&quot; class=&quot;headerlink&quot; title=&quot;信息概要：&quot;&gt;&lt;/a&gt;信息概要：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;设计名称：校园餐厅菜谱评价交流订餐平台&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;参与人数：2人&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java面试笔记（1）</title>
    <link href="http://yoursite.com/2019/07/15/InterviewNotesJava-1/"/>
    <id>http://yoursite.com/2019/07/15/InterviewNotesJava-1/</id>
    <published>2019-07-15T09:10:39.000Z</published>
    <updated>2019-07-20T15:01:32.164Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Java基础"><a href="#一、Java基础" class="headerlink" title="一、Java基础"></a>一、Java基础</h1><h3 id="一-、Java有几种基本类型，占用多少字节，取值范围怎么样，默认值是多少？"><a href="#一-、Java有几种基本类型，占用多少字节，取值范围怎么样，默认值是多少？" class="headerlink" title="(一)、Java有几种基本类型，占用多少字节，取值范围怎么样，默认值是多少？"></a>(一)、Java有几种基本类型，占用多少字节，取值范围怎么样，默认值是多少？</h3><p><img src="/2019/07/15/InterviewNotesJava-1/AA.png" alt="AA"></p><p>1字节=8位（1B=8bit）</p><p><img src="/2019/07/15/InterviewNotesJava-1/AB.png" alt="Ab"></p><p><img src="/2019/07/15/InterviewNotesJava-1/AC.png" alt="Ac"></p><h3 id="（二）、String-，Stringbuffer，-StringBuilder-相关"><a href="#（二）、String-，Stringbuffer，-StringBuilder-相关" class="headerlink" title="（二）、String ，Stringbuffer， StringBuilder 相关"></a>（二）、String ，Stringbuffer， StringBuilder 相关</h3><h5 id="1-String能被继承吗？为什么？"><a href="#1-String能被继承吗？为什么？" class="headerlink" title="1.String能被继承吗？为什么？"></a>1.String能被继承吗？为什么？</h5><p>不可以，因为String的定义是这样的：”public final class String extends Object”,是被final修饰的类，无法被继承。</p><h5 id="2-String，-Stringbuffer，-StringBuilder-的区别。"><a href="#2-String，-Stringbuffer，-StringBuilder-的区别。" class="headerlink" title="2.String， Stringbuffer， StringBuilder 的区别。"></a>2.String， Stringbuffer， StringBuilder 的区别。</h5><h6 id="（1）-介绍"><a href="#（1）-介绍" class="headerlink" title="（1）.介绍"></a>（1）.介绍</h6><p>String：</p><p>在Java中，字符串属于对象，被final修饰的类，因此的String值是不可变的，每次对该类的操作都会生成新的String对象，会对内存空间造成浪费。流程如下图：</p><p><img src="/2019/07/15/InterviewNotesJava-1/AD.png" alt="Ad"></p><p>Stringbuffer和 StringBuilder：</p><p>当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。<br>和 String 类不同的是，StringBuffer 和 StringBuilder类的对象能够被多次的修改，并且不产生新的未使用对象。<br>StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于StringBuilder 的方法不是线程安全的（不能同步访问）。<br>由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。</p><h6 id="（2）-继承结构"><a href="#（2）-继承结构" class="headerlink" title="（2）.继承结构"></a>（2）.继承结构</h6><p><img src="/2019/07/15/InterviewNotesJava-1/AE.png" alt="AE"></p><h6 id="（3）-区别"><a href="#（3）-区别" class="headerlink" title="（3）.区别"></a>（3）.区别</h6><p>a.字符修改的区别（主要）:</p><p><img src="/2019/07/15/InterviewNotesJava-1/AF.png" alt="AF"></p><p>b.初始化的区别,String可以空赋值，后者不行:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="keyword">null</span>;   </span><br><span class="line">String s = “abc”;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer s = <span class="keyword">null</span>; <span class="comment">//结果警告：Null pointer access: The variable result can only be null at this location</span></span><br><span class="line">StringBuffer s = <span class="keyword">new</span> StringBuffer();<span class="comment">//StringBuffer对象是一个空的对象</span></span><br><span class="line">StringBuffer s = <span class="keyword">new</span> StringBuffer(“abc”);<span class="comment">//创建带有内容的StringBuffer对象,对象的内容就是字符串”</span></span><br></pre></td></tr></table></figure><h6 id="（4）-小结"><a href="#（4）-小结" class="headerlink" title="（4）.小结"></a>（4）.小结</h6><p>如果要操作少量的数据用 String。<br>多线程操作字符串缓冲区下操作大量数据 StringBuffer。<br>单线程操作字符串缓冲区下操作大量数据 StringBuilder。</p><h3 id="三-、ArrayList-和-LinkedList-有什么区别"><a href="#三-、ArrayList-和-LinkedList-有什么区别" class="headerlink" title="(三)、ArrayList 和 LinkedList 有什么区别"></a>(三)、ArrayList 和 LinkedList 有什么区别</h3><p>ArrayList和LinkedList都实现了List接口，有以下的不同点：<br>1、ArrayList是基于索引的数据接口，它的底层是数组。它可以以O(1)时间复杂度对元素进行随机访问。与此对应，LinkedList是以元素列表的形式存储它的数据，每一个元素都和它的前一个和后一个元素链接在一起，在这种情况下，查找某个元素的时间复杂度是O(n)。<br>2、相对于ArrayList，LinkedList的插入，添加，删除操作速度更快，因为当元素被添加到集合任意位置的时候，不需要像数组那样重新计算大小或者是更新索引。<br>3、LinkedList比ArrayList更占内存，因为LinkedList为每一个节点存储了两个引用，一个指向前一个元素，一个指向下一个元素。</p><h3 id="四-、讲讲类的实例化顺序，比如父类静态数据，构造函数，字段，子类静态数据，构造函数，字段，当-new-的时候，-他们的执行顺序"><a href="#四-、讲讲类的实例化顺序，比如父类静态数据，构造函数，字段，子类静态数据，构造函数，字段，当-new-的时候，-他们的执行顺序" class="headerlink" title="(四)、讲讲类的实例化顺序，比如父类静态数据，构造函数，字段，子类静态数据，构造函数，字段，当 new 的时候， 他们的执行顺序"></a>(四)、讲讲类的实例化顺序，比如父类静态数据，构造函数，字段，子类静态数据，构造函数，字段，当 new 的时候， 他们的执行顺序</h3><p>此题考察的是类加载器实例化时进行的操作步骤（加载–&gt;连接-&gt;初始化）。<br>父类静态变量、<br>父类静态代码块、<br>子类静态变量、<br>子类静态代码块、<br>父类非静态变量（父类实例成员变量）、<br>父类构造函数、<br>子类非静态变量（子类实例成员变量）、<br>子类构造函数。</p><p>参考实例：<a href="https://blog.csdn.net/u014042066/article/details/77574956" target="_blank" rel="noopener">CSDN|《深入理解Java类实例化时jvm执行顺序》|石奈子</a></p><p>参考文章：<a href="https://blog.csdn.net/u014042066/article/details/77394480" target="_blank" rel="noopener">CSDN|《深入Java虚拟机之类加载》|石奈子</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、Java基础&quot;&gt;&lt;a href=&quot;#一、Java基础&quot; class=&quot;headerlink&quot; title=&quot;一、Java基础&quot;&gt;&lt;/a&gt;一、Java基础&lt;/h1&gt;&lt;h3 id=&quot;一-、Java有几种基本类型，占用多少字节，取值范围怎么样，默认值是多少？&quot;&gt;&lt;a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>个人博客搭建所用教程整理</title>
    <link href="http://yoursite.com/2019/07/13/blog20190713/"/>
    <id>http://yoursite.com/2019/07/13/blog20190713/</id>
    <published>2019-07-13T12:45:47.000Z</published>
    <updated>2019-07-20T20:03:49.542Z</updated>
    
    <content type="html"><![CDATA[<p>用了几天的时间搭建了第一个个人博客，还有后续需要调整，过程中全是参照网上教程，因此在此附上各个教程，以及补充少量教程中可能会有的问题。</p><h1 id="主要教程"><a href="#主要教程" class="headerlink" title="主要教程"></a>主要教程</h1><p>此个人博客采用的是GitHub+hexo来进行搭建，再在腾讯云几块钱买了个域名，因此下面将附上的此方式的主要教程。</p><h2 id="教程涉及的一些工具-准备工作："><a href="#教程涉及的一些工具-准备工作：" class="headerlink" title="教程涉及的一些工具/准备工作："></a>教程涉及的一些工具/准备工作：</h2><p><u>GitHub的安装与使用：<a href="https://blog.csdn.net/chinarcsdn/article/details/78726040" target="_blank" rel="noopener">GitHub使用教程、注册与安装</a></u></p><p><u>Node.js下载地址：<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">点击此处</a></u></p><p><code>（注意：Windows系统中下载请点二进制文件（.zip）,根据个人系统进行选择）</code></p><p><img src="/2019/07/13/blog20190713/1.png" alt="1"></p><p>腾讯云相关：</p><p><strong><code>（注：腾讯云域名并非必须购买，使用Git的“XXX.github.io”格式域名也可以免费搭建，只是这样的话域名较为复杂，而且其中也包含GitHub这样的信息。）</code></strong></p><ol><li><u>域名注册流程：<a href="https://cloud.tencent.com/document/product/242/9595" target="_blank" rel="noopener">点击此处</a></u></li><li><u>腾讯云网址：<a href="https://cloud.tencent.com/" target="_blank" rel="noopener">点击此处</a></u></li></ol><h3 id="一些用到的主要教程贴"><a href="#一些用到的主要教程贴" class="headerlink" title="一些用到的主要教程贴"></a>一些用到的主要教程贴</h3><p>该博客主要搭建教程参考自以下：</p><ol><li><u>[CSDN]《hexo史上最全搭建教程》 作者：zjufangzh  <a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="noopener">点击此处</a></u></li><li><u>[bilibili]《手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo》 作者：CodeSheep <a href="https://www.bilibili.com/video/av44544186?t=430" target="_blank" rel="noopener">点击此处</a></u></li><li><u>[CSDN]《用Hexo搭建博客（二）——修改基本内容》 作者：X北辰北<a href="https://blog.csdn.net/qq_35117024/article/details/81390780" target="_blank" rel="noopener">点击此处</a></u></li><li><u>[CSDN]《github搭建个人网站后如何设置域名》 作者：Bright2017<a href="https://blog.csdn.net/Bright2017/article/details/78624724" target="_blank" rel="noopener">点击此处</a></u></li><li><u>[云+社区]《如何把自己github博客配置到一个腾讯云购买的自定义域名上》 作者：Jerry Wang @SAP<a href="https://cloud.tencent.com/developer/article/1438545" target="_blank" rel="noopener">点击此处</a></u></li><li><u>[简书]《hexo+github上传图片到博客》 作者：iOS收藏家<a href="https://www.jianshu.com/p/8d28027fec76" target="_blank" rel="noopener">点击此处</a></u></li></ol><p>（注：在搭建过程中需要用控制台来进行上传下载，用普通网络容易失败，建议进行科学上网，或者笔记本连接科学上网后的手机热点。科学上网在搭建过程中进行使用，后面更新文章时的上传无需科学上网）</p><hr><p>以上就是这篇博客主要参考的教程，接下来再做一些补充说明。</p><h4 id="一、关于写博客的软件："><a href="#一、关于写博客的软件：" class="headerlink" title="一、关于写博客的软件："></a>一、关于写博客的软件：</h4><p>在部署好你的个人博客以后，需要用.md的文档来对文章内容进行编辑，此处我个人使用typora软件，因此附上该软件下载地址和md文件的基本格式教程：</p><ol><li><u>typora官网下载：<a href="https://www.typora.io/" target="_blank" rel="noopener">点击此处</a></u></li><li><u>[简书]《如何写md格式的文档》 作者：剃了胡子 <a href="https://www.jianshu.com/p/f378e3f2e7e1" target="_blank" rel="noopener">点击此处</a></u></li></ol><h4 id="二、关于cmd命令："><a href="#二、关于cmd命令：" class="headerlink" title="二、关于cmd命令："></a>二、关于cmd命令：</h4><p>在操作过程中会用到Windows控制台命令，或者Git Bash。在此附上一些cmd常用命令以作参考：</p><p>C盘跳转E盘：<img src="/2019/07/13/blog20190713/2.png" alt="2"></p><p>进入一个目录下面：<img src="/2019/07/13/blog20190713/3.png" alt="3"></p><p>退回到上一目录：<img src="/2019/07/13/blog20190713/4.png" alt="4"></p><p>具体参考教程贴：<u>[博客园]《CMD常用命令》 作者：微时空 <a href="https://www.cnblogs.com/JTCLASSROOM/p/11050743.html" target="_blank" rel="noopener">点击此处</a></u></p><h4 id="三、关于个人博客里的图片"><a href="#三、关于个人博客里的图片" class="headerlink" title="三、关于个人博客里的图片"></a>三、关于个人博客里的图片</h4><p>按照上文中教程6：“<u>[简书]《hexo+github上传图片到博客》 作者：iOS收藏家<a href="https://www.jianshu.com/p/8d28027fec76" target="_blank" rel="noopener">点击此处</a></u>”设置好图片上传后，在实际编写MD文档中插入图片应该注意以下三点：</p><ol><li><h5 id="使用相对路径"><a href="#使用相对路径" class="headerlink" title="使用相对路径"></a>使用相对路径</h5><p>在插入图片时，应当根据生成的目录名来设置类似于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![a1](blog1/a1.png)//这是相对路径，正确</span><br></pre></td></tr></table></figure><p>这样的格式，使用相对路径，如果使用绝对路径，就会导致上传到GitHub后，MD文档中图片路径和实际GitHub中的路径不相匹配，无法加载图片的情况。绝对路径如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![a1](C:\Blog\myblog\source\_posts\blog1\a1.png)//这是绝对路径，错误</span><br></pre></td></tr></table></figure></li><li><h5 id="注意区分“-”和”-“"><a href="#注意区分“-”和”-“" class="headerlink" title="注意区分“\”和”/“"></a>注意区分“\”和”/“</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![a1](blog1/a1.png)//使用&quot;/&quot;,正确</span><br><span class="line">![a1](blog1\a1.png)//使用&quot;\&quot;，错误</span><br></pre></td></tr></table></figure><p>在Typora中，写入图片路径中无论使用”/“还是”\“，都可以显示图片，但是上传图片后，只有使用“/”才可以正常显示图片。</p></li><li><h5 id="区分文件名和后缀的大小写"><a href="#区分文件名和后缀的大小写" class="headerlink" title="区分文件名和后缀的大小写"></a>区分文件名和后缀的大小写</h5><p>对于同一个文件“a1.png”，使用以下四种写法，在Typora中均可以正常显示，但上传文件后，只有大小写与原文件对应，才会在博客中加载该图片。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![a1](blog1/A1.png)//文件名大写，错误</span><br><span class="line">![a1](blog1/a1.png)//文件名与原文件一致，正确</span><br><span class="line">![a1](blog1/a1.PNG)//后缀名大写，错误</span><br><span class="line">![a1](blog1/a1.png)//后缀名与原文件一致，正确</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用了几天的时间搭建了第一个个人博客，还有后续需要调整，过程中全是参照网上教程，因此在此附上各个教程，以及补充少量教程中可能会有的问题。&lt;/p&gt;
&lt;h1 id=&quot;主要教程&quot;&gt;&lt;a href=&quot;#主要教程&quot; class=&quot;headerlink&quot; title=&quot;主要教程&quot;&gt;&lt;/a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>更新测试</title>
    <link href="http://yoursite.com/2019/07/13/blog2/"/>
    <id>http://yoursite.com/2019/07/13/blog2/</id>
    <published>2019-07-13T09:02:24.000Z</published>
    <updated>2019-07-13T09:06:30.850Z</updated>
    
    <content type="html"><![CDATA[<p>第二篇测试博客，更新测试</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第二篇测试博客，更新测试&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/07/12/hello-world/"/>
    <id>http://yoursite.com/2019/07/12/hello-world/</id>
    <published>2019-07-12T12:54:50.873Z</published>
    <updated>2019-07-12T13:50:44.795Z</updated>
    
    <content type="html"><![CDATA[<p>这是第一句话</p><h1 id="这是h1标题"><a href="#这是h1标题" class="headerlink" title="这是h1标题"></a>这是h1标题</h1><h2 id="这是h2标题"><a href="#这是h2标题" class="headerlink" title="这是h2标题"></a>这是h2标题</h2><h3 id="这是h3标题"><a href="#这是h3标题" class="headerlink" title="这是h3标题"></a>这是h3标题</h3><h4 id="这是h4标题"><a href="#这是h4标题" class="headerlink" title="这是h4标题"></a>这是h4标题</h4><h5 id="这是h5标题"><a href="#这是h5标题" class="headerlink" title="这是h5标题"></a>这是h5标题</h5><h6 id="这是h6标题"><a href="#这是h6标题" class="headerlink" title="这是h6标题"></a>这是h6标题</h6><p>接下来是分隔线</p><hr><hr><hr><p>换  </p><p>行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">as </span><br><span class="line">asa</span><br><span class="line">zxc</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   String breed;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">   String color;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">barking</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">hungry</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">sleeping</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一级引用</p><blockquote><p>二级引用</p><blockquote><p>三级引用</p></blockquote></blockquote></blockquote><p>* 文本1 * 或 _ 文本1 _ 　　斜体；</p><p>　　** 文本2 ** 或者 __ 文本2 __ 　　加重强调；</p><p>　　<strong>* 文本3 *</strong> 或者 <strong>_ 文本3 _</strong> 　　特别强调；</p><p><em>强调一</em></p><p><strong>强调二</strong></p><p><strong><em>强调三</em></strong></p><p><a href="https://www.baidu.com/" target="_blank" rel="noopener">连接</a></p><p>下面是有序列表</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><p>下面是无序列表</p><ul><li>1</li><li>2</li><li>3</li></ul><p>图片连接格式</p><p><img src="http://xxx.com/path1/path2/abc.png" alt="Alt text"> </p><p><img src="https://img2018.cnblogs.com/blog/1230971/201903/1230971-20190311164720398-1885944048.png" alt="表格格式"> </p><p>|name|age|sex|</p><table><thead><tr><th>:——:</th><th>:—-:</th><th>:—:</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>3</td></tr></tbody></table><p>jjjjjjjjjjjjjjjjjjjjjjjjjjjjj</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是第一句话&lt;/p&gt;
&lt;h1 id=&quot;这是h1标题&quot;&gt;&lt;a href=&quot;#这是h1标题&quot; class=&quot;headerlink&quot; title=&quot;这是h1标题&quot;&gt;&lt;/a&gt;这是h1标题&lt;/h1&gt;&lt;h2 id=&quot;这是h2标题&quot;&gt;&lt;a href=&quot;#这是h2标题&quot; class=&quot;he
      
    
    </summary>
    
    
  </entry>
  
</feed>
